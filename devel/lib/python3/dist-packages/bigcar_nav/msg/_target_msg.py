# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bigcar_nav/target_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class target_msg(genpy.Message):
  _md5sum = "bc0e7bd1dc8a707120e4081a94662789"
  _type = "bigcar_nav/target_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool recognize
bool shot
bool grab

int8 i
int8 i_x
int8 i_y
int16 x_offset
int16 y_offset

int8 type
int8 direct
int8 height
int8 arm_status
int8 claw_status
int8 lift_status
int8 vision_status

uint16 depth

string target_name
string do_what
string name
"""
  __slots__ = ['recognize','shot','grab','i','i_x','i_y','x_offset','y_offset','type','direct','height','arm_status','claw_status','lift_status','vision_status','depth','target_name','do_what','name']
  _slot_types = ['bool','bool','bool','int8','int8','int8','int16','int16','int8','int8','int8','int8','int8','int8','int8','uint16','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       recognize,shot,grab,i,i_x,i_y,x_offset,y_offset,type,direct,height,arm_status,claw_status,lift_status,vision_status,depth,target_name,do_what,name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(target_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.recognize is None:
        self.recognize = False
      if self.shot is None:
        self.shot = False
      if self.grab is None:
        self.grab = False
      if self.i is None:
        self.i = 0
      if self.i_x is None:
        self.i_x = 0
      if self.i_y is None:
        self.i_y = 0
      if self.x_offset is None:
        self.x_offset = 0
      if self.y_offset is None:
        self.y_offset = 0
      if self.type is None:
        self.type = 0
      if self.direct is None:
        self.direct = 0
      if self.height is None:
        self.height = 0
      if self.arm_status is None:
        self.arm_status = 0
      if self.claw_status is None:
        self.claw_status = 0
      if self.lift_status is None:
        self.lift_status = 0
      if self.vision_status is None:
        self.vision_status = 0
      if self.depth is None:
        self.depth = 0
      if self.target_name is None:
        self.target_name = ''
      if self.do_what is None:
        self.do_what = ''
      if self.name is None:
        self.name = ''
    else:
      self.recognize = False
      self.shot = False
      self.grab = False
      self.i = 0
      self.i_x = 0
      self.i_y = 0
      self.x_offset = 0
      self.y_offset = 0
      self.type = 0
      self.direct = 0
      self.height = 0
      self.arm_status = 0
      self.claw_status = 0
      self.lift_status = 0
      self.vision_status = 0
      self.depth = 0
      self.target_name = ''
      self.do_what = ''
      self.name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B3b2h7bH().pack(_x.recognize, _x.shot, _x.grab, _x.i, _x.i_x, _x.i_y, _x.x_offset, _x.y_offset, _x.type, _x.direct, _x.height, _x.arm_status, _x.claw_status, _x.lift_status, _x.vision_status, _x.depth))
      _x = self.target_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.do_what
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.recognize, _x.shot, _x.grab, _x.i, _x.i_x, _x.i_y, _x.x_offset, _x.y_offset, _x.type, _x.direct, _x.height, _x.arm_status, _x.claw_status, _x.lift_status, _x.vision_status, _x.depth,) = _get_struct_3B3b2h7bH().unpack(str[start:end])
      self.recognize = bool(self.recognize)
      self.shot = bool(self.shot)
      self.grab = bool(self.grab)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.do_what = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.do_what = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B3b2h7bH().pack(_x.recognize, _x.shot, _x.grab, _x.i, _x.i_x, _x.i_y, _x.x_offset, _x.y_offset, _x.type, _x.direct, _x.height, _x.arm_status, _x.claw_status, _x.lift_status, _x.vision_status, _x.depth))
      _x = self.target_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.do_what
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.recognize, _x.shot, _x.grab, _x.i, _x.i_x, _x.i_y, _x.x_offset, _x.y_offset, _x.type, _x.direct, _x.height, _x.arm_status, _x.claw_status, _x.lift_status, _x.vision_status, _x.depth,) = _get_struct_3B3b2h7bH().unpack(str[start:end])
      self.recognize = bool(self.recognize)
      self.shot = bool(self.shot)
      self.grab = bool(self.grab)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.target_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.do_what = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.do_what = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B3b2h7bH = None
def _get_struct_3B3b2h7bH():
    global _struct_3B3b2h7bH
    if _struct_3B3b2h7bH is None:
        _struct_3B3b2h7bH = struct.Struct("<3B3b2h7bH")
    return _struct_3B3b2h7bH
