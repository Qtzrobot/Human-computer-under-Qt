// Generated by gencpp from file bigcar_nav/target_msg.msg
// DO NOT EDIT!


#ifndef BIGCAR_NAV_MESSAGE_TARGET_MSG_H
#define BIGCAR_NAV_MESSAGE_TARGET_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bigcar_nav
{
template <class ContainerAllocator>
struct target_msg_
{
  typedef target_msg_<ContainerAllocator> Type;

  target_msg_()
    : recognize(false)
    , shot(false)
    , grab(false)
    , i(0)
    , i_x(0)
    , i_y(0)
    , x_offset(0)
    , y_offset(0)
    , type(0)
    , direct(0)
    , height(0)
    , arm_status(0)
    , claw_status(0)
    , lift_status(0)
    , vision_status(0)
    , depth(0)
    , target_name()
    , do_what()
    , name()  {
    }
  target_msg_(const ContainerAllocator& _alloc)
    : recognize(false)
    , shot(false)
    , grab(false)
    , i(0)
    , i_x(0)
    , i_y(0)
    , x_offset(0)
    , y_offset(0)
    , type(0)
    , direct(0)
    , height(0)
    , arm_status(0)
    , claw_status(0)
    , lift_status(0)
    , vision_status(0)
    , depth(0)
    , target_name(_alloc)
    , do_what(_alloc)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _recognize_type;
  _recognize_type recognize;

   typedef uint8_t _shot_type;
  _shot_type shot;

   typedef uint8_t _grab_type;
  _grab_type grab;

   typedef int8_t _i_type;
  _i_type i;

   typedef int8_t _i_x_type;
  _i_x_type i_x;

   typedef int8_t _i_y_type;
  _i_y_type i_y;

   typedef int16_t _x_offset_type;
  _x_offset_type x_offset;

   typedef int16_t _y_offset_type;
  _y_offset_type y_offset;

   typedef int8_t _type_type;
  _type_type type;

   typedef int8_t _direct_type;
  _direct_type direct;

   typedef int8_t _height_type;
  _height_type height;

   typedef int8_t _arm_status_type;
  _arm_status_type arm_status;

   typedef int8_t _claw_status_type;
  _claw_status_type claw_status;

   typedef int8_t _lift_status_type;
  _lift_status_type lift_status;

   typedef int8_t _vision_status_type;
  _vision_status_type vision_status;

   typedef uint16_t _depth_type;
  _depth_type depth;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_name_type;
  _target_name_type target_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _do_what_type;
  _do_what_type do_what;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::bigcar_nav::target_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bigcar_nav::target_msg_<ContainerAllocator> const> ConstPtr;

}; // struct target_msg_

typedef ::bigcar_nav::target_msg_<std::allocator<void> > target_msg;

typedef boost::shared_ptr< ::bigcar_nav::target_msg > target_msgPtr;
typedef boost::shared_ptr< ::bigcar_nav::target_msg const> target_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bigcar_nav::target_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bigcar_nav::target_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bigcar_nav::target_msg_<ContainerAllocator1> & lhs, const ::bigcar_nav::target_msg_<ContainerAllocator2> & rhs)
{
  return lhs.recognize == rhs.recognize &&
    lhs.shot == rhs.shot &&
    lhs.grab == rhs.grab &&
    lhs.i == rhs.i &&
    lhs.i_x == rhs.i_x &&
    lhs.i_y == rhs.i_y &&
    lhs.x_offset == rhs.x_offset &&
    lhs.y_offset == rhs.y_offset &&
    lhs.type == rhs.type &&
    lhs.direct == rhs.direct &&
    lhs.height == rhs.height &&
    lhs.arm_status == rhs.arm_status &&
    lhs.claw_status == rhs.claw_status &&
    lhs.lift_status == rhs.lift_status &&
    lhs.vision_status == rhs.vision_status &&
    lhs.depth == rhs.depth &&
    lhs.target_name == rhs.target_name &&
    lhs.do_what == rhs.do_what &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bigcar_nav::target_msg_<ContainerAllocator1> & lhs, const ::bigcar_nav::target_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bigcar_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bigcar_nav::target_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bigcar_nav::target_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bigcar_nav::target_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bigcar_nav::target_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bigcar_nav::target_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bigcar_nav::target_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bigcar_nav::target_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc0e7bd1dc8a707120e4081a94662789";
  }

  static const char* value(const ::bigcar_nav::target_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc0e7bd1dc8a7071ULL;
  static const uint64_t static_value2 = 0x20e4081a94662789ULL;
};

template<class ContainerAllocator>
struct DataType< ::bigcar_nav::target_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bigcar_nav/target_msg";
  }

  static const char* value(const ::bigcar_nav::target_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bigcar_nav::target_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool recognize\n"
"bool shot\n"
"bool grab\n"
"\n"
"int8 i\n"
"int8 i_x\n"
"int8 i_y\n"
"int16 x_offset\n"
"int16 y_offset\n"
"\n"
"int8 type\n"
"int8 direct\n"
"int8 height\n"
"int8 arm_status\n"
"int8 claw_status\n"
"int8 lift_status\n"
"int8 vision_status\n"
"\n"
"uint16 depth\n"
"\n"
"string target_name\n"
"string do_what\n"
"string name\n"
;
  }

  static const char* value(const ::bigcar_nav::target_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bigcar_nav::target_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.recognize);
      stream.next(m.shot);
      stream.next(m.grab);
      stream.next(m.i);
      stream.next(m.i_x);
      stream.next(m.i_y);
      stream.next(m.x_offset);
      stream.next(m.y_offset);
      stream.next(m.type);
      stream.next(m.direct);
      stream.next(m.height);
      stream.next(m.arm_status);
      stream.next(m.claw_status);
      stream.next(m.lift_status);
      stream.next(m.vision_status);
      stream.next(m.depth);
      stream.next(m.target_name);
      stream.next(m.do_what);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bigcar_nav::target_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bigcar_nav::target_msg_<ContainerAllocator>& v)
  {
    s << indent << "recognize: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recognize);
    s << indent << "shot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shot);
    s << indent << "grab: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.grab);
    s << indent << "i: ";
    Printer<int8_t>::stream(s, indent + "  ", v.i);
    s << indent << "i_x: ";
    Printer<int8_t>::stream(s, indent + "  ", v.i_x);
    s << indent << "i_y: ";
    Printer<int8_t>::stream(s, indent + "  ", v.i_y);
    s << indent << "x_offset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_offset);
    s << indent << "y_offset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y_offset);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "direct: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direct);
    s << indent << "height: ";
    Printer<int8_t>::stream(s, indent + "  ", v.height);
    s << indent << "arm_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arm_status);
    s << indent << "claw_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.claw_status);
    s << indent << "lift_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_status);
    s << indent << "vision_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vision_status);
    s << indent << "depth: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.depth);
    s << indent << "target_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_name);
    s << indent << "do_what: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.do_what);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIGCAR_NAV_MESSAGE_TARGET_MSG_H
